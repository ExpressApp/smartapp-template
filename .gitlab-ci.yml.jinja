# YAML objects named with dot is anchors, which are not recognized as jobs
.run_bot: &run_bot
  - docker rm -f ${CONTAINER_NAME} || true
  {% if add_worker -%}- docker rm -f ${CONTAINER_NAME}-worker || true{%- endif %}
  - docker pull ${CONTAINER_RELEASE_IMAGE}
  # Add new envs here. Don't forget to add them in example.env and docker-compose files.
  - docker run
    -d
    --name ${CONTAINER_NAME}
    --restart always
    --label traefik.http.routers.${CONTAINER_NAME}.rule="Host(\`${BOT_URL}\`)"
    --label traefik.enable=true
    --label traefik.http.services.${CONTAINER_NAME}.loadbalancer.server.port="8000"
    --log-opt max-size=10m
    --log-opt max-file=5
    -e POSTGRES_DSN="${POSTGRES_DSN}"
    -e REDIS_DSN="${REDIS_DSN}"
    -e BOT_CREDENTIALS="${BOT_CREDENTIALS}"
    -e DEBUG="${DEBUG:-false}"
    $CONTAINER_RELEASE_IMAGE
  {% if add_worker -%}
  # Add envs for worker here
  - docker run
    -d
    --name ${CONTAINER_NAME}-worker
    --restart always
    --log-opt max-size=10m
    --log-opt max-file=5
    -e POSTGRES_DSN="${POSTGRES_DSN}"
    -e REDIS_DSN="${REDIS_DSN}"
    -e BOT_CREDENTIALS="${BOT_CREDENTIALS}"
    -e DEBUG="${DEBUG:-false}"
    ${CONTAINER_RELEASE_IMAGE}
    bash -c 'PYTHONPATH="$PYTHONPATH:$PWD" saq app.worker.worker.settings'
  {%- endif %}

.create_db: &create_db
  - psql -c "create user \"${POSTGRES_USER}\"" postgres || true
  - psql -c "alter user \"${POSTGRES_USER}\" with password '${POSTGRES_PASSWORD}'" postgres
  - psql -c "create database \"${POSTGRES_DB}\" with owner \"${POSTGRES_USER}\"" postgres || true

.install_dependencies: &install_dependencies
  - echo -e "machine ${GIT_HOST}\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
  - pip install -q poetry
  - poetry config virtualenvs.in-project true
  - poetry install

.cache_dependencies: &cache_dependencies
  key:
    files:
      - poetry.lock
    prefix: "venv"
  paths:
    - .cache/pip
    - .venv

.postgres_envs: &postgres_envs
  - POSTGRES_USER=${CONTAINER_NAME}
  - POSTGRES_DB=${CONTAINER_NAME}
  - POSTGRES_PASSWORD=$(openssl rand -hex 16)
  - POSTGRES_HOST=${PROD_POSTGRES_HOST}
  - POSTGRES_DSN=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB

.download_smartapp_files: &download_smartapp_files
    - if [ -z ${SMARTAPP_TAG+x} ];
      then
      echo "SMARTAPP_TAG is unset, trying to get latest from api" &&
      SMARTAPP_TAG=`python3 get_latest_frontend_tag.py ${SMARTAPP_GITLAB_ID} ${SMARTAPP_API_READ_TOKEN} ${BACKEND_VERSION}`;
      fi
    - echo "Deploing with smartapp tag ${SMARTAPP_TAG}"
    - 'wget --header="PRIVATE-TOKEN: $SMARTAPP_API_READ_TOKEN" https://gitlab.ccsteam.ru/api/v4/projects/${SMARTAPP_GITLAB_ID}/packages/generic/${SMARTAPP_PACKAGE_NAME}/${SMARTAPP_TAG}/build.tgz'
    - tar zxvf build.tgz && mkdir -p app/smartapp_files/static/ && mv build/* app/smartapp_files/static/
    - ls app/smartapp_files/


.botstest_before_script: &botstest_before_script
  - echo "${BOT_PROJECT_NAME}"
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - if [ -z ${BOT_PROJECT_NAME:-} ]; then BOT_PROJECT_NAME=${CI_PROJECT_PATH_SLUG#"$CI_PROJECT_NAMESPACE-"}; fi
  - CONTAINER_NAME="${BOT_PROJECT_NAME}${CONTAINER_PREFIX}"
  - CONTAINER_RELEASE_IMAGE="$CI_REGISTRY_IMAGE:${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}"
  - BOT_CREDENTIALS=${DEV_BOT_CREDENTIALS}
  - BOT_URL="${CONTAINER_NAME}.${DEV_SERVER_HOST}"
  - REDIS_DSN=redis://${DOCKER_NETWORK_IP}/1
  - *postgres_envs

.deploy.botstest:
  image: registry.ccsteam.ru/cicd-images/docker:latest
  tags:
    - bots-test
  only:
    - branches
    - tags
  when: manual
  variables:
    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: none
  before_script: *botstest_before_script
  script:
    - echo "Use URL 'https://${BOT_URL}/' in your cts admin site"
    - echo "Using credentials ${BOT_CREDENTIALS}"
    - echo "Deploying Docker container ${CONTAINER_NAME}"
    - *create_db
    - *run_bot

.deploy.botstest.stop:
  when: manual
  environment:
    action: stop
  extends: .deploy.botstest
  script:
    {% if add_worker -%}
    - docker rm -f ${CONTAINER_NAME} ${CONTAINER_NAME}-worker || true
    {%- endif %}
    - docker rm -f ${CONTAINER_NAME} || true
    - psq- psql -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${POSTGRES_DB}';" postgres || true
    - psql -c "drop database \"${POSTGRES_DB}\"" postgres || true
    - psql -c "drop user \"${POSTGRES_USER}\"" postgres || true

.publish_eXpress_public_registry_before_script: &publish_eXpress_public_registry_before_script
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker login -u $PUBLIC_REGISTRY_USER -p $PUBLIC_REGISTRY_PASSWORD $PUBLIC_REGISTRY
  - docker pull $CONTAINER_RELEASE_IMAGE
  - docker tag $CONTAINER_RELEASE_IMAGE $CONTAINER_PUBLIC_RELEASE_IMAGE

.publish_eXpress_public_registry_script: &publish_eXpress_public_registry_script
  - docker push $CONTAINER_PUBLIC_RELEASE_IMAGE

.publish_eXpress_public_registry_after_script: &publish_eXpress_public_registry_after_script
  - docker rmi $CONTAINER_RELEASE_IMAGE || true
  - docker rmi $CONTAINER_PUBLIC_RELEASE_IMAGE || true

.eXpress_public_registry:
  stage: publish
  image: registry.ccsteam.ru/cicd-images/docker:latest
  tags:
    - docker
  only:
    - tags
  when: manual
  environment:
    name: publish
  variables:
    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: none
    CONTAINER_RELEASE_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    PROJECT_PUBLIC_REGISTRY_PATH: "$PUBLIC_REGISTRY/$PUBLIC_REGISTRY_CATALOG/$CI_PROJECT_NAME"
    CONTAINER_PUBLIC_RELEASE_IMAGE: "$PROJECT_PUBLIC_REGISTRY_PATH:$CI_COMMIT_TAG"
    CONTAINER_PUBLIC_LATEST_RELEASE_IMAGE: "$PROJECT_PUBLIC_REGISTRY_PATH:latest"

# Jobs
variables:
  GIT_DEPTH: 1  # Fetch only latest commit
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

stages:
  - check
  - build
  - security
  - deploy-test
  - deploy
  - publish

default:
  interruptible: true

lint:
  image: python:3.11
  stage: check
  tags:
    - docker
  cache: *cache_dependencies
  before_script:
    - *install_dependencies
  script:
    - poetry run ./scripts/lint

test:
  image: python:3.11
  stage: check
  tags:
    - docker
  services:
    - name: postgres:15.3-alpine
      alias: postgres
      variables:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    - name: redis:7.0-alpine
      alias: redis
  cache: *cache_dependencies
  variables:
    BOT_CREDENTIALS: cts.example.com@secret@123e4567-e89b-12d3-a456-426655440000
    POSTGRES_DSN: postgres://postgres:postgres@postgres/postgres
    REDIS_DSN: redis://redis/0
  before_script:
    - *install_dependencies
  script:
    - poetry run pytest --cov-config=setup.cfg
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)/'

security:
  stage: security
  allow_failure: true
  trigger:
    include:
      - project: devsecops/pipelines
        file: integration_templates/python.yml


build:
  image: docker:latest
  stage: build
  tags:
    - docker
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - CONTAINER_RELEASE_IMAGE="$CI_REGISTRY_IMAGE:${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}"
  script:
    - docker pull $CONTAINER_RELEASE_IMAGE || true
    - apk add python3
    - apk add jq
    - apk add grep
    - python3 --version
    - BACKEND_VERSION=$(grep -m 1 version pyproject.toml | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)
    - *download_smartapp_files
    - docker build
      --cache-from $CONTAINER_RELEASE_IMAGE
      --build-arg GIT_HOST=$GIT_HOST
      --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN
      --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA
      --label BackendVersion="${BACKEND_VERSION}"
      --label SmartappVersion="${SMARTAPP_TAG}"
      --force-rm
      -t $CONTAINER_RELEASE_IMAGE .
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker image inspect $CONTAINER_RELEASE_IMAGE | jq '.[0] .Config .Labels'
    - docker rmi $CONTAINER_RELEASE_IMAGE

deploy.botstest.S1:
  stage: deploy-test
  extends:
    - .deploy.botstest
  environment:
    name: S1
    on_stop: deploy.botstest.S1.stop
  variables:
    CONTAINER_PREFIX: -s1

deploy.botstest.S1.stop:
  stage: deploy-test
  extends:
    - .deploy.botstest.stop
  environment:
    name: S1
  variables:
    CONTAINER_PREFIX: -s1

deploy.botsprod:
  stage: deploy
  image: docker:latest
  tags:
    - botsprod-yac
  only:
    # Note the bots-prod worker requires branch to be protected
    - master
  when: manual
  environment:
    name: production
  variables:
    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: none
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - if [ -z ${BOT_PROJECT_NAME:-} ]; then BOT_PROJECT_NAME=${CI_PROJECT_PATH_SLUG#"$CI_PROJECT_NAMESPACE-"}; fi
    - CONTAINER_NAME=$BOT_PROJECT_NAME
    - CONTAINER_RELEASE_IMAGE="$CI_REGISTRY_IMAGE:${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}"
    - BOT_URL="${BOT_PROJECT_NAME}.${PROD_SERVER_HOST}"
    - *postgres_envs
    - REDIS_DSN=redis://${DOCKER_NETWORK_IP}/1
  script:
    - echo "Use URL 'https://${BOT_URL}/' in your cts admin site"
    - echo "Using credentials ${BOT_CREDENTIALS}"
    - echo "Deploing Docker container ${CONTAINER_NAME}"
    - *create_db
    - *run_bot
  needs:
    - job: security

eXpress_public_registry:
  extends: .eXpress_public_registry
  before_script: *publish_eXpress_public_registry_before_script
  script: *publish_eXpress_public_registry_script
  after_script: *publish_eXpress_public_registry_after_script

eXpress_public_registry.as_latest:
  extends: .eXpress_public_registry
  before_script:
    - *publish_eXpress_public_registry_before_script
    - docker tag $CONTAINER_RELEASE_IMAGE $CONTAINER_PUBLIC_LATEST_RELEASE_IMAGE
  script:
    - *publish_eXpress_public_registry_script
    - docker push $CONTAINER_PUBLIC_LATEST_RELEASE_IMAGE
  after_script:
    - *publish_eXpress_public_registry_after_script
    - docker rmi $CONTAINER_PUBLIC_LATEST_RELEASE_IMAGE || true
